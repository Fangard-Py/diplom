import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

"""
Задача регрессии
Базовая реализация линейной регрессии с использованием scikit-learn.
"""


# Генерация случайных данных
np.random.seed(42)
X = np.random.rand(100, 1) * 10
y = X + np.random.normal(size=X.shape)

# Разделение данных на тренировочные и тестовые наборы
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)

# Создание и обучение модели
model = LinearRegression()
model.fit(X_train, y_train)

# Предсказание значений на тестовых данных
y_pred = model.predict(X_test)

# Оценка качества модели
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f'MSE: {mse:.2f}')
print(f'R2 score: {r2:.2f}')

"""
1. Подготовка данных: 
Сначала нужно импортировать необходимые библиотеки, такие как numpy для работы с массивами данных и sklearn для машинного обучения. Затем генерируются случайные данные для обучения и тестирования модели. Эти данные могут представлять собой двумерный массив входных признаков и соответствующий одномерный массив целевых значений.

2. Разделение данных: 
После генерации данных их следует разделить на два набора: тренировочный и тестовый. Это делается для того, чтобы модель могла обучиться на одних данных, а затем проверяться на других, ранее невиданных ею данных. Для этого используется функция train_test_split из модуля sklearn.model_selection.

3. Выбор и обучение модели: 
Далее выбирается модель для обучения. В данном случае мы используем простую линейную регрессию (LinearRegression), которая является базовой моделью для решения задач регрессии. Модель создается путем вызова конструктора соответствующего класса, после чего она обучается на тренировочных данных с помощью метода .fit().

4. Прогнозирование: 
Когда модель обучена, ее можно использовать для прогнозирования значений на тестовых данных. Для этого применяется метод .predict() к тестовым данным.

5. Оценка качества модели: 
Наконец, для оценки качества модели используются различные метрики, такие как среднеквадратическая ошибка (MSE) и коэффициент детерминации ($R^2$). Эти метрики позволяют понять, насколько точно модель предсказывает значения на тестовых данных.

Таким образом, процесс решения задачи регрессии включает подготовку данных, разделение их на тренировочную и тестовую выборки, обучение модели, прогнозирование и оценку результатов.
"""